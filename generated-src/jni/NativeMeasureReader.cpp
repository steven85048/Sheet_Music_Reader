// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from MeasureDetection.djinni

#include "NativeMeasureReader.hpp"  // my header

namespace djinni_generated {

NativeMeasureReader::NativeMeasureReader() : ::djinni::JniInterface<::sheetmusicreader::MeasureReader, NativeMeasureReader>("smr/sheetmusicreader/MeasureReader$CppProxy") {}

NativeMeasureReader::~NativeMeasureReader() = default;


CJNIEXPORT void JNICALL Java_smr_sheetmusicreader_MeasureReader_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::sheetmusicreader::MeasureReader>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_smr_sheetmusicreader_MeasureReader_Create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::sheetmusicreader::MeasureReader::Create();
        return ::djinni::release(::djinni_generated::NativeMeasureReader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_smr_sheetmusicreader_MeasureReader_00024CppProxy_native_1DetectMeasure(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::sheetmusicreader::MeasureReader>(nativeRef);
        ref->DetectMeasure();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
